generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique @db.VarChar(100)
  password   String       @db.VarChar(100)
  name       String       @db.VarChar(100)
  nickname   String       @db.VarChar(100)
  token      String?      @db.VarChar(255)
  email      String       @db.VarChar(200)
  phone      String       @db.VarChar(100)
  role       Role         @default(USER)
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now()) @updatedAt
  education  Education[]
  experience Experience[]
  course     Course[]
  // expectation Expectation?
  family     Family[]
  profile    Profile?
  job        Job[]
  skills     Skill[]
  applicant  Applicant[]

  @@map("users")
}

model Profile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  users            User     @relation(fields: [userId], references: [id])
  birthday         DateTime @db.Date
  birthplace       String   @db.VarChar(100)
  age              Int      @db.Int
  gender           Gender
  religion         String   @db.VarChar(50)
  address_domisili String   @db.VarChar(255)
  address_ktp      String   @db.VarChar(255)
  image            String   @db.VarChar(255)
  about            String   @db.LongText

  @@map("profile")
}

model Education {
  id              Int      @id @default(autoincrement())
  userId          Int?
  users           User?    @relation(fields: [userId], references: [id])
  instance_name   String   @db.VarChar(255)
  education_level String   @db.VarChar(50)
  major           String   @db.VarChar(255)
  gpa             Float    @db.Double
  enrollment_year DateTime @db.Date
  graduation_year DateTime @db.Date

  @@unique([instance_name, userId, education_level])
  @@index([userId])
  @@map("educations")
}

model Course {
  id            Int      @id @default(autoincrement())
  userId        Int?
  users         User?    @relation(fields: [userId], references: [id])
  instance_name String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  qualification String   @db.VarChar(10)
  start_course  DateTime @db.Date
  end_course    DateTime @db.Date

  @@unique([userId, instance_name, type])
  @@index([userId])
  @@map("courses")
}

model Experience {
  id            Int      @id @default(autoincrement())
  userId        Int?
  users         User?    @relation(fields: [userId], references: [id])
  instance_name String   @db.VarChar(255)
  position      String   @db.VarChar(100)
  salary        Int      @db.Int
  reason        String   @db.VarChar(255)
  start_work    DateTime @db.Date
  end_work      DateTime @db.Date

  @@unique([userId, instance_name, position])
  @@index([userId])
  @@map("experiences")
}

model Family {
  id      Int    @id @default(autoincrement())
  userId  Int?
  users   User?  @relation(fields: [userId], references: [id])
  name    String @db.VarChar(100)
  status  String @db.VarChar(30)
  address String @db.VarChar(255)
  phone   String @db.VarChar(100)
  work    String @db.VarChar(100)

  @@unique([userId, name, status])
  @@index([userId])
  @@map("family")
}

model Expectation {
  id                 Int    @id @default(autoincrement())
  // userId             Int  @unique
  // users              User @relation(fields: [userId], references: [id])
  salary_expectation String @db.VarChar(10)

  @@map("expectations")
}

model Skill {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(100)
  users User[]
  job   Job[]

  @@map("skills")
}

model Job {
  id         Int         @id @default(autoincrement())
  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
  salary     Int         @db.Int
  details    String      @db.LongText
  needs      Int         @db.Int
  skill      Skill[]
  division   Division    @relation(fields: [divisionId], references: [id])
  divisionId Int
  position   Position    @relation(fields: [positionId], references: [id])
  positionId Int
  // questionnaire Questionnaire[]
  template   Template    @relation(fields: [templateId], references: [id])
  templateId Int         @unique
  test       Test        @relation(fields: [testId], references: [id])
  testId     Int         @unique
  applicants Applicant[]
  // template   Template?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @updatedAt

  @@index([authorId])
  @@index([divisionId])
  @@index([positionId])
  @@map("jobs")
}

model Division {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(150)
  jobs Job[]

  @@map("divisions")
}

model Position {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(150)
  jobs Job[]

  @@map("positions")
}

model Questionnaire {
  id       Int        @id @default(autoincrement())
  question String     @unique @db.VarChar(255)
  type     Type       @default(Text)
  // template   Template @relation(fields: [templateId], references: [id])
  // templateId Int
  template Template[]
  // jobs       Job[]

  @@map("questionnaires")
}

model Template {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(150)
  questionnaire Questionnaire[]
  job           Job?

  @@map("templates")
}

model Test_Question {
  id       Int       @id @default(autoincrement())
  question String    @unique @db.VarChar(255)
  type     Type      @default(Option)
  options  Options[]
  test     Test[]

  @@map("questions")
}

model Test {
  id           Int             @id @default(autoincrement())
  name         String          @unique @db.VarChar(150)
  questionTest Test_Question[]
  job          Job?

  @@map("tests")
}

model Options {
  id       Int             @id @default(autoincrement())
  option   String          @unique @db.VarChar(255)
  question Test_Question[]

  @@map("options")
}

model Applicant {
  id               Int       @id @default(autoincrement())
  application_date DateTime  @default(now())
  interview_date   DateTime?
  placed_date      DateTime?
  status           Status
  description      String?   @db.VarChar(255)
  job              Job       @relation(fields: [jobId], references: [id])
  jobId            Int
  user             User      @relation(fields: [userId], references: [id])
  userId           Int

  @@unique([jobId, userId])
  @@index([jobId])
  @@index([userId])
  @@map("applicants")
}

enum Role {
  USER
  ADMIN
  SUPER
}

enum Gender {
  Male
  Female
}

enum Status {
  Submitted
  Interview
  Hold
  Placed
}

enum Type {
  LongText
  Text
  Number
  Option
}
